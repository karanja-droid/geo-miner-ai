version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:14-3.3
    environment:
      POSTGRES_DB: geovision_ai_miner
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - geovision-network

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - geovision-network

  # Backend API
  backend:
    build:
      context: ./geovision-ai-miner-server
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/geovision_ai_miner
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    networks:
      - geovision-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./geovision-ai-miner-client
      dockerfile: Dockerfile
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      REACT_APP_ENVIRONMENT: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - geovision-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - geovision-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  geovision-network:
    driver: bridge 